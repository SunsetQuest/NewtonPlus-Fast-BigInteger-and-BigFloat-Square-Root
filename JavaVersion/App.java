import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.Duration;
import java.time.Instant;
import java.util.Random;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;

public class App {
    public static void main(String[] args) throws Exception {

        // BenchmarkDoubleToBigInteger();
        // System.in.read();
         //java.util.concurrent.TimeUnit.MINUTES.sleep(90);
        // Creating a BigInteger object
        BigInteger big;
        BigInteger squareRoot = BigInteger.ZERO;
        big = new BigInteger("0");                      if (!big.sqrt().equals(NewtonPlusSqrt(big))) {System.out.println("Fail on " + big.toString() + " and " + NewtonPlusSqrt(big) + "!!!!!!!!!!!!!"); }
        big = new BigInteger("1");                      if (!big.sqrt().equals(NewtonPlusSqrt(big))) {System.out.println("Fail on " + big.toString() + " and " + NewtonPlusSqrt(big) + "!!!!!!!!!!!!!"); }
        big = new BigInteger("2");                      if (!big.sqrt().equals(NewtonPlusSqrt(big))) {System.out.println("Fail on " + big.toString() + " and " + NewtonPlusSqrt(big) + "!!!!!!!!!!!!!"); }
        big = new BigInteger("4503599761588224");       if (!big.sqrt().equals(NewtonPlusSqrt(big))) {System.out.println("Fail on " + big.toString() + " and " + NewtonPlusSqrt(big) + "!!!!!!!!!!!!!"); }
        big = new BigInteger("144838757784765629");     if (!big.sqrt().equals(NewtonPlusSqrt(big))) {System.out.println("Fail on " + big.toString() + " and " + NewtonPlusSqrt(big) + "!!!!!!!!!!!!!"); }
        big = new BigInteger("4611686018427387904");    if (!big.sqrt().equals(NewtonPlusSqrt(big))) {System.out.println("Fail on " + big.toString() + " and " + NewtonPlusSqrt(big) + "!!!!!!!!!!!!!"); }
        big = new BigInteger("65785897164448191381343511924499180834109624990100754110346692714720833794182365156704520567066494452568598038317099669513516096681618601973599684423150328823149127367318079223120613816366038825604373268484954782110429835105286425333570541703714024151532084137071597682869259489221172755742364472724201391713876228852531646764843076854104581946061772267221757994736893926938160629380056553372248214368909504039212458266423980657106363733011856061121104369672147994640441778258160341955435109744447134256187215376894548013860157067815014854327054401293768815922507649024668392519266407522576716874831315048731693618952003216023606499644720147295275387516119527423680540664128864272031313852922193652901872732314717832642396584320613044874876038709312185088372090147112187657869779392688566837197222873583961493636492878943080433802748761360310302723190158716092892744929758873685478975276800670405063542783787175166169602615999466339596354504219501105673891354573209038920435930403019087822420187428656762642041998808872161199084947727133936559102364496735902940200177931856797143955996184320324843305825519761471929663872341396515529983727108459536090173169742307430044945248663781699303787795654384125310492475708658293822181665360");
        if (!big.sqrt().equals(NewtonPlusSqrt(big))) {System.out.println("Fail on " +  big.toString() + "!!!!!!!!!!!!!"); }
        big = new BigInteger("");
        if (!big.sqrt().equals(NewtonPlusSqrt(big))) {System.out.println("Fail on " + big.toString() + "!!!!!!!!!!!!!"); }
        big = new BigInteger("179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368");
        if (!big.sqrt().equals(NewtonPlusSqrt(big))) {System.out.println("Fail on " + big.toString() + "!!!!!!!!!!!!!"); }
        big = new BigInteger("179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858369");
        if (!big.sqrt().equals(NewtonPlusSqrt(big))) {System.out.println("Fail on " + big.toString() + "!!!!!!!!!!!!!"); }
        big = new BigInteger("179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986050859197892009348423098673397576100060199749986929562362761314132383880020795324759350467498370284959417336104341480439649700322878491181830478233599");
        if (!big.sqrt().equals(NewtonPlusSqrt(big))) {System.out.println("Fail on " + big.toString() + "!!!!!!!!!!!!!"); }
        big = new BigInteger("179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986050859197892009348423098673397576100060199749986929562362761314132383880020795324759350467498370284959417336104341480439649700322878491181830478233600");
        if (!big.sqrt().equals(NewtonPlusSqrt(big))) {System.out.println("Fail on " +  big.toString() + "!!!!!!!!!!!!!"); }
        big = new BigInteger("17494584706016591027735461995965655369485392135483279753178087315506247479908101322432716538350151127201566210005644237814513392249452453615066147272228907663966390734640115862609428708808030883561312370933224354989584163634780158683901786449438459917087336832199985240528014645163631305415749573655211490978631716429164715576326122339425754435169992953750485069221610238394718337618921655783782041008005224393274487002390986157125495569904504979630450742020277163243700439394100971116982469820853805921150898151992772979321237326399758133");
        if (!big.sqrt().equals(NewtonPlusSqrt(big))) {System.out.println("Fail on " + big.toString() + "!!!!!!!!!!!!!"); }
        big = new BigInteger("324869344822123891204500737190540217603582230298827943613070138634574543931529836644908557280814426421865640009546187334173413368040022188428404427615158419933534601057247685980219135338184905291081445059428169291870657858169275815840222956732487620761154654410650902413711236901782615917737119907905229234946211961080658388960638760959363844640743773892304002116832698921887645232477218304189719735593244966041503279433593532306881416962517923413587821230750081023226603959650598328121575017362314407084534778367861380310792005727284136781374900887396549343");
        if (!big.sqrt().equals(NewtonPlusSqrt(big))) {System.out.println("Fail on " + big.toString() + "!!!!!!!!!!!!!"); }
        big = new BigInteger("197120777410685286861723419348662720446983624468633941814867274161329731855");
        if (!big.sqrt().equals(NewtonPlusSqrt(big))) {System.out.println("Fail on " + big.toString() + "!!!!!!!!!!!!!"); }


        if (true) { // true=Error checking, false= Benchmark
            ////////////////////////////////// Error Checking Area //////////////////////////////////
            // for (BigInteger temp = new BigInteger("4611686018427387904");
            //////////////////// /*temp.compareTo(BigInteger.ZERO) >0*/; temp =
            //////////////////// temp.add(BigInteger.valueOf(100007))) {
            int displayCounter = 0;
            BigInteger temp = BigDecimal.valueOf(4799901).toBigInteger();   // new BigInteger("9999901"); //BigDecimal.valueOf(1.7e37).toBigInteger();
                                                                           // //21267648410233606278185108989805867927
            while (true /* temp.compareTo(BigInteger.ZERO) >0 */) {

                NewtonPlusSqrt(temp);

                // BigInteger ans = temp.sqrt();
                // BigInteger sun = NewtonPlusSqrt(temp);
                // if (!ans.equals(sun)) {
                //     System.out.println(
                //             "Fail on " + temp.toString() + " Java: " + ans + " Sun: " + sun + " !!!!!!!!!!!!!");
                //     System.in.read();
                // }

                if ((displayCounter++ % 100000000) == 0) {
                    System.out.println("Status: " + temp.toString());
                }
                BigInteger addVal = temp.divide(BigInteger.valueOf(4799901)); // 101, 1009, 10007 , 100003, 1000003,
                                                                                // 9999901 , 179424673, 982451653
                // BigInteger addVal = BigInteger.ONE;
                temp = temp.add(addVal);
            }

        } else {
            //////////////////////////////////  Benchmarking Area  //////////////////////////////////
            try (PrintWriter writer = new PrintWriter("test.csv")) {
                StringBuilder sb = new StringBuilder();
                Random rand = new Random();
                Instant ends, starts = Instant.now();
                for (var bitsSize = 5; bitsSize < 200000; bitsSize += 1) {  //10 to (66 or 2500)

                    // Generate a random number
                    BigInteger bigInt = (new BigInteger(bitsSize, rand)).or(BigInteger.ONE.shiftLeft(bitsSize-1));
                    double timeWillTakeEAch = (0.133 * (double) bitsSize * (double) bitsSize) + (179.35 * (double) bitsSize) + 7693;
                    int loopCount = (int) ((20 * 1000000000.0) / timeWillTakeEAch);
                    
                    // if ulong or smaller increase test count
                    if (bitsSize < 65) 
                        loopCount *= 20;


                    ////////// Test Newton Plus //////////


                    System.gc ();
                    System.runFinalization ();
                    for (int i = 0; i < (loopCount>>7); i++) {
                        squareRoot = NewtonPlusSqrt(bigInt);
                    }
                    starts = Instant.now();
                    for (int i = 0; i < loopCount; i++) {
                        squareRoot = NewtonPlusSqrt(bigInt);        }    
                    ends = Instant.now();


                    sb.append(bitsSize + "," + loopCount + "," + Duration.between(starts,ends).dividedBy(loopCount/1000).toNanos() );
                    System.out.println("NewtonPlusSqrt - bits:" + bitsSize /* + big + " is " + squareRoot */ + " @ " + (Duration.between(starts, ends).dividedBy(loopCount/1000).toNanos() + " loops: " + loopCount));
   
                    System.gc ();
                    System.runFinalization ();
                    for (int i = 0; i < (loopCount>>7); i++) {
                        squareRoot = bigInt.sqrt();    }
                    starts = Instant.now();
                    for (int i = 0; i < loopCount; i++) {
                        squareRoot = bigInt.sqrt();             }
                    ends = Instant.now();

                    sb.append("," + Duration.between(starts, ends).dividedBy(loopCount/1000).toNanos() + "\r\n" );
                    System.out.println("BigIntegerSqrt - bits:" + bitsSize /*+ big + " is " + squareRoot*/ + " @ " + (Duration.between(starts, ends).dividedBy(loopCount/1000).toNanos() + " loops: " + loopCount + "\n"));

                    writer.write(sb.toString());
                    writer.flush();
                    sb.setLength(0);
                    
                }
            } catch (FileNotFoundException e) {
                System.out.println(e.getMessage());
            }
        }
    }


    // A fast square root by Ryan Scott White. 
    public static BigInteger NewtonPlusSqrt(BigInteger x) {
        if (x.compareTo(BigInteger.valueOf(144838757784765629L)) < 0) {
            long xAsLong = x.longValue();
            long vInt = (long)Math.sqrt(xAsLong);
            if (vInt * vInt > xAsLong)
                vInt--;
            return BigInteger.valueOf(vInt);  }

        double xAsDub = x.doubleValue();
        BigInteger val;
        if (xAsDub < 2.1267e37) // 2.12e37 largest here since sqrt(long.max*long.max) > long.max
        {
            long vInt = (long)Math.sqrt(xAsDub);
            val = BigInteger.valueOf((vInt + x.divide(BigInteger.valueOf(vInt)).longValue()) >> 1);
        }
        else if (xAsDub < 4.3322e127) {
            // Convert a double to a BigInteger
            long bits = Double.doubleToLongBits(Math.sqrt(xAsDub));
            int exp = ((int) (bits >> 52) & 0x7ff) - 1075;
            val = BigInteger.valueOf((bits & ((1L << 52)) - 1) | (1L << 52)).shiftLeft(exp);

            val = x.divide(val).add(val).shiftRight(1);
            if (xAsDub > 2e63) {
                val = x.divide(val).add(val).shiftRight(1);  }
        }
        else // handle large numbers over 4.3322e127
        {
            int xLen = x.bitLength();
            int wantedPrecision = ((xLen + 1) / 2);
            int xLenMod = xLen + (xLen & 1) + 1;

            //////// Do the first Sqrt on Hardware ////////
            long tempX = x.shiftRight(xLenMod - 63).longValue();
            double tempSqrt1 = Math.sqrt(tempX);
            long valLong = Double.doubleToLongBits(tempSqrt1) & 0x1fffffffffffffL;

            if (valLong == 0)
                valLong = 1L << 53;

            //////// Classic Newton Iterations ////////
            val = BigInteger.valueOf(valLong).shiftLeft(53 - 1)
                    .add((x.shiftRight(xLenMod - (3 * 53))).divide(BigInteger.valueOf(valLong)));

            int size = 106;
            for (; size < 256; size <<= 1) {
                val = val.shiftLeft(size - 1).add(x.shiftRight(xLenMod - (3 * size)).divide(val)); }

            if (xAsDub > 4e254) // 4e254 = 1<<845.77 
            {
                int numOfNewtonSteps = 31 - Integer.numberOfLeadingZeros(wantedPrecision / size) + 1;

                ////// Apply Starting Size ////////
                int wantedSize = (wantedPrecision >> numOfNewtonSteps) + 2;
                int needToShiftBy = size - wantedSize;
                val = val.shiftRight(needToShiftBy);

                size = wantedSize;
                do {
                    //////// Newton Plus Iteration ////////
                    int shiftX = xLenMod - (3 * size);
                    BigInteger valSqrd = val.multiply(val).shiftLeft(size - 1);
                    BigInteger valSU = x.shiftRight(shiftX).subtract(valSqrd);
                    val = val.shiftLeft(size).add(valSU.divide(val));
                    size *= 2;
                } while (size < wantedPrecision);
            }
            val = val.shiftRight(size - wantedPrecision);
        }

        // Detect a round ups. This function can be further optimized - see article.
        // For a ~7% speed bump the following line can be removed but round-ups will occur.
        if (val.multiply(val).compareTo(x) > 0)
            val = val.subtract(BigInteger.ONE);

        // Enabling the below will guarantee an error is stopped for larger numbers.
        // Note: As of this writing, there are no known errors.
        BigInteger tmp = val.multiply(val);
        if (tmp.compareTo(x) > 0)  {
            System.out.println("val^2(" + val.multiply(val).toString() + ") >=  x(" + x.toString() + ")"); 
            System.console().readLine();
            //throw new Exception("Sqrt function had internal error - value too high");   
        }
        if (tmp.add(val.shiftLeft(1)).add(BigInteger.ONE).compareTo(x) <= 0) {
            System.out.println("(val+1)^2(" + val.add(BigInteger.ONE).multiply(val.add(BigInteger.ONE)).toString() + ") >=  x(" + x.toString() + ")"); 
            System.console().readLine();
            //throw new Exception("Sqrt function had internal error - value too low");    
        }

        return val;
    }


    private static void BenchmarkDoubleToBigInteger() {
        BigInteger m = BigInteger.ZERO;
        Instant starts, ends;
        double testVal = -9999999.99999999;

        starts = Instant.now();// long start = System.nanoTime();
        for (int i = 0; i < 1000000; i++) {

            m = DoubleToBigInteger(testVal);
        }
        ends = Instant.now();// long end = System.nanoTime();
        System.out.println("A " + m + " took " + (Duration.between(starts, ends).dividedBy(1000000)));

        starts = Instant.now();// long start = System.nanoTime();
        for (int i = 0; i < 1000000; i++) {

            m = BigDecimal.valueOf(testVal).toBigInteger();
        }
        ends = Instant.now();// long end = System.nanoTime();
        System.out.println("B " + m + " took " + (Duration.between(starts, ends).dividedBy(1000000)));
    }

    public static BigInteger bigIntSqRootFloor(BigInteger x)
            throws IllegalArgumentException {
        if (x.compareTo(BigInteger.ZERO) < 0) {
            throw new IllegalArgumentException("Negative argument.");
        }
        // square roots of 0 and 1 are trivial and
        // y == 0 will cause a divide-by-zero exception
        if (x.equals(BigInteger.ZERO) || x.equals(BigInteger.ONE)) {
            return x;
        } // end if
        BigInteger two = BigInteger.valueOf(2L);
        BigInteger y;
        // starting with y = x / 2 avoids magnitude issues with x squared
        for (y = x.divide(two); y.compareTo(x.divide(y)) > 0; y = ((x.divide(y)).add(y)).divide(two))
            ;
        return y;
    } // end bigIntSqRootFloor


    // Fast BigIntegerToDouble by Ryan Scott White 2/5/2022
    static BigInteger DoubleToBigInteger(double testVal) {
        long bits = Double.doubleToLongBits(testVal);
        int exp = ((int) (bits >> 52) & 0x7ff) - 1075;
        BigInteger m = BigInteger.valueOf((bits & ((1L << 52)) - 1) | (1L << 52)).shiftLeft(exp);
        return (bits >= 0) ? m : m.negate();
    }

}
