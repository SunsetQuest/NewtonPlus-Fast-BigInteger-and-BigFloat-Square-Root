// Copyright Ryan Scott White. 3/2022
// Released under the MIT License. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


#pragma warning disable IDE0051, IDE0050 // Ignore unused code and missing namespace
using System;
using System.Diagnostics;
using System.IO;
using System.Numerics;
using System.Threading.Tasks;
using static BigIntegerSquareRoot;

internal static class Test_BigIntegers
{
    public static void TestBigIntegerSqrt(Func<BigInteger, BigInteger> Sqrt, int testTimeinSeconds = 10, int randomMinBitSize = -1, int randomMaxBitSize = 5000, bool print = true)
    {
        const bool ALLOW_TIMED_EXPIRE_ON_RANDOM_NUMBER_TEST = false;
        long BruteForceStoppedAt = 0;
        int RAND_SEED = new Random().Next();
        int failCount = 0;
        BigInteger temp = BigInteger.Parse("123");
        Stopwatch sw = new();
        long testCt = 0;

#if DEBUG
        int MaxDegreeOfParallelism = 1; 
#else
        int MaxDegreeOfParallelism = 32;
#endif

        if(print) Console.Write($"\r\n=================== TESTING: {Sqrt.Method.Name} =======================");

        ////////////////////////// Verification 1 - Common Testing /////////////
        if(print) Console.Write("\r\nVerification 1: Common Numbers /w issues test: ....");

        try
        {
            temp = Sqrt(-1);
            if(print) Console.WriteLine($"Failed for value -1 !!!!!!!! - Returned {temp} and not an errror.  FailCount: { failCount++ }");
        }
        catch (Exception) { }
        try
        {
            temp = (BigInteger)double.MinValue + (BigInteger)double.MinValue;
            temp = Sqrt(temp);
            if(print) Console.WriteLine($"Failed for value (double.MinValue + double.MinValue) !!!!!!!!!!!!!!!!! - Returned {temp} and not an errror  FailCount: { failCount++ }");
        }
        catch (Exception) { }

        temp = BigInteger.Parse("4503599761588224");
        if (!IsSqrt(temp, Sqrt(temp)))
        {
            if(print) Console.WriteLine($"Failed for sqrt(4503599761588224) - Math.Sqrt() Limitation!!!!!!!!!!!!! {temp}   FailCount: { failCount++ }");
        }


        temp = BigInteger.Parse("4");
        if (!IsSqrt(temp, Sqrt(temp)))
        {
            if(print) Console.WriteLine($"Failed on sqrt(4)!!!!!!!!!!!!!!!!! Result was {Sqrt(temp)}   FailCount: { failCount++ }");
        }

        temp = BigInteger.Parse("15");
        if (!IsSqrt(temp, Sqrt(temp)))
        {
            if(print) Console.WriteLine($"Failed on sqrt(15)!!!!!!!!!!!!!!!!! Result was {Sqrt(temp)}   FailCount: { failCount++ }");
        }

        if (Sqrt(0) != 0)
        {
            if(print) Console.WriteLine($"Failed for value 0  !!!!!!!! FailCount: { failCount++ }");
        }

        temp = BigInteger.Parse("65785897164448191381343511924499180834109624990100754110346692714720833794182365156704520567066494452568598038317099669513516096681618601973599684423150328823149127367318079223120613816366038825604373268484954782110429835105286425333570541703714024151532084137071597682869259489221172755742364472724201391713876228852531646764843076854104581946061772267221757994736893926938160629380056553372248214368909504039212458266423980657106363733011856061121104369672147994640441778258160341955435109744447134256187215376894548013860157067815014854327054401293768815922507649024668392519266407522576716874831315048731693618952003216023606499644720147295275387516119527423680540664128864272031313852922193652901872732314717832642396584320613044874876038709312185088372090147112187657869779392688566837197222873583961493636492878943080433802748761360310302723190158716092892744929758873685478975276800670405063542783787175166169602615999466339596354504219501105673891354573209038920435930403019087822420187428656762642041998808872161199084947727133936559102364496735902940200177931856797143955996184320324843305825519761471929663872341396515529983727108459536090173169742307430044945248663781699303787795654384125310492475708658293822181665360");
        if (!IsSqrt(temp, Sqrt(temp)))
        {
            if(print) Console.WriteLine($"Failed for a big number 4a!!!!!!!!!!!!!!!!! {temp}   FailCount: { failCount++ }");
        }

        temp = BigInteger.Parse("62362385618440558416947016669824906883813410011053641792946485497339721329431721439415220243379222918320766404281447700590021891155050265114385592812878735466325208888593348836073537528761371853341648068552950252434358013341985391327537178373087155201768599524019380757016544450988505261122166827623821157388989385416619683557220268832127834874073559435984144961254858185346608192576658054546623242322471196316756094923811160906264371131392381779320586622639793335662752727861825331393639498034265911346139282451973559648859868126280816483538209855193358838624452241451974573654740521140261037836393493195199235018766811286482795967197478000411576883345741508867320043804212855588444336753360390022381829058493004310313059457501659510131594527812649374332829267428993258110432996432011983126655315265920566458028478121477367097244510948421854062842203915600005914824");
        if (!IsSqrt(temp, Sqrt(temp)))
        {
            if(print) Console.WriteLine($"Failed for a big number 4b!!!!!!!!!!!!!!!!! {temp}   FailCount: { failCount++ }");
        }

        //failed with round up
        temp = BigInteger.Parse("105304873411458465237823109840830461532297664641861909345335983651620697961501875992724194244954865033669992328452594774452926688664213255617325573108242413961035542821302346985592911344125656037430417857923745187297258902871436992889265964566408383242965076143762182878415696697321419732252675577742829165177250146537026239309456512322120322660658657500735460842080634302497836781370951570897343811129414613636887318514067098255516234127025764803768697992519955839169838829708639416834170285096476387342434255498654317390346575985930158243128857324460324557274293835174709332634562827897313");
        if (!IsSqrt(temp, Sqrt(temp)))
        {
            if (print) Console.WriteLine($"Failed for a big number 4c!!!!!!!!!!!!!!!!! {temp}   FailCount: { failCount++ }");
        }

        //failed with round up
        temp = BigInteger.Parse("4158778369644239253144735435452135103052920040777068394326845749479928668137113273641891938414472777155402871106641843416775631184591761508954289137159646589762108986911327059013268970766061512895207495793891523453588504760273949467854779946180645436561957963870029200019077271901983439750690458982602101659773464708927882431821592294995304801341476291809490825735434728904816304538249047761794496268396415473815044527283546569535324502176951155143748970420841309367267113066246134610984581041136088216956464090974746565616023221");
        if (!IsSqrt(temp, Sqrt(temp)))
        {
            if (print) Console.WriteLine($"Failed for a big number 4d!!!!!!!!!!!!!!!!! {temp}   FailCount: { failCount++ }");
        }



        temp = BigInteger.Parse("4332296397072526994426");
        if (!IsSqrt(temp, Sqrt(temp)))
        {
            if(print) Console.WriteLine($"Failed for sqrt(4332296397072526994426) !!!!!!!!!!!!! {temp}   FailCount: { failCount++ }");
        }

        temp = BigInteger.Parse("144838757784765629");
        if (!IsSqrt(temp, Sqrt(temp)))
        {
            if(print) Console.WriteLine($"Failed for sqrt(144838757784765629)!!!!!!!!!!!!!!!!! {temp}   FailCount: { failCount++ }");
        }

        temp = BigInteger.Parse("");
        if (!IsSqrt(temp, Sqrt(temp)))
        {
            if(print) Console.WriteLine($"Failed for huge sqrt(568596673212406)!!!!!!!!!!!!!!!!! {temp}   FailCount: { failCount++ }");
        }

        temp = BigInteger.Parse("179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368");
        if (!IsSqrt(temp, Sqrt(temp)))
        {
            if(print) Console.WriteLine($"Failed for value Double.Max !!!!!!!!!!!!!!!!!  FailCount: { failCount++ }");
        }

        temp = BigInteger.Parse("179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858369");
        if (!IsSqrt(temp, Sqrt(temp)))
        {
            if(print) Console.WriteLine($"Failed for value Double.Max + 1 !!!!!!!!!!!!!!!!!  FailCount: { failCount++ }");
        }

        temp = BigInteger.Parse("179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986050859197892009348423098673397576100060199749986929562362761314132383880020795324759350467498370284959417336104341480439649700322878491181830478233599");
        if (!IsSqrt(temp, Sqrt(temp)))
        {
            if(print) Console.WriteLine($"Failed for value Double.Max + some 1 !!!!!!!!!!!!!!!!!  FailCount: { failCount++ }");
        }

        temp = BigInteger.Parse("179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986050859197892009348423098673397576100060199749986929562362761314132383880020795324759350467498370284959417336104341480439649700322878491181830478233600");
        if (!IsSqrt(temp, Sqrt(temp)))
        {
            if(print) Console.WriteLine($"Failed for value Double.Max + some 2 !!!!!!!!!!!!!!!!!  FailCount: { failCount++ }");
        }

        temp = BigInteger.Parse("17494584706016591027735461995965655369485392135483279753178087315506247479908101322432716538350151127201566210005644237814513392249452453615066147272228907663966390734640115862609428708808030883561312370933224354989584163634780158683901786449438459917087336832199985240528014645163631305415749573655211490978631716429164715576326122339425754435169992953750485069221610238394718337618921655783782041008005224393274487002390986157125495569904504979630450742020277163243700439394100971116982469820853805921150898151992772979321237326399758133");
        if (!IsSqrt(temp, Sqrt(temp)))
        {
            if(print) Console.WriteLine($"Failed for a big number 1!!!!!!!!!!!!!!!!! {temp}   FailCount: { failCount++ }");
        }

        temp = BigInteger.Parse("324869344822123891204500737190540217603582230298827943613070138634574543931529836644908557280814426421865640009546187334173413368040022188428404427615158419933534601057247685980219135338184905291081445059428169291870657858169275815840222956732487620761154654410650902413711236901782615917737119907905229234946211961080658388960638760959363844640743773892304002116832698921887645232477218304189719735593244966041503279433593532306881416962517923413587821230750081023226603959650598328121575017362314407084534778367861380310792005727284136781374900887396549343");
        if (!IsSqrt(temp, Sqrt(temp)))
        {
            if(print) Console.WriteLine($"Failed for a big number 2!!!!!!!!!!!!!!!!! {temp}   FailCount: { failCount++ }");
        }

        temp = BigInteger.Parse("628585829943043711774780150124486302296386743285745807915546421548369772944349205519895063878854598279327388017081748928549003526040710666991887335679085821326590372431911569248580138566784523769649934299594659147063327786855481652768517809939447427274571843102808731405570448808757614071");
        if (!IsSqrt(temp, Sqrt(temp)))
        {
            if(print) Console.WriteLine($"Failed for a big number 3!!!!!!!!!!!!!!!!! {temp}   FailCount: { failCount++ }");
        }

        temp = BigInteger.Parse("197120777410685286861723419348662720446983624468633941814867274161329731855");
        if (!IsSqrt(temp, Sqrt(temp)))
        {
            if(print) Console.WriteLine($"Failed for a big number 4!!!!!!!!!!!!!!!!! {temp}   FailCount: { failCount++ }");
        }


        testCt = 14;
        if(print) Console.Write($"...Done  Errors so far: {failCount}");

        ////////////////////////// Verification 2: Brute Force testing (starting at 0) //////////////////////////
        if(print) Console.Write($"\r\nVerification 2: Brute Force test(starting at 0)....");
        sw.Restart();
        //const long FULL_COVERAGE_TESTING_RANGE_MAX = (long)uint.MaxValue/2;// * 64; 
        for (long i = 0; i < long.MaxValue; i++) //0-138129003319
        {
            //if(printOutput) Console.Write($"\r\n.... {i * 1048576} to {i * 1048576 + 1048576}  fails {failCount}");
            Parallel.For(i * 1048576, i * 1048576 + 1048576, new ParallelOptions { MaxDegreeOfParallelism = MaxDegreeOfParallelism }, (x, s) =>
             {

                 BigInteger root = Sqrt(x);
                 BigInteger lowerBound = root * root;
                 BigInteger upperBound = lowerBound + 2 * root + 1;
                 if (x < lowerBound || x >= upperBound)
                 {
                     double c = Math.Sqrt(x);
                     if(print) Console.WriteLine($"In: {(double)x} !!!!! {(lowerBound > x ? "Lo" : "Hi")}  In:{root}^2={x}  xShouldBe: {(double)c}");
                     failCount++;
                 }
             });

            testCt += 1048576;

            if (i % 128 == 0)
            {
                if(print) Console.WriteLine($"{i}M");
            }

            if (sw.ElapsedMilliseconds > (testTimeinSeconds * 1000) * 0.25)
            {
                BruteForceStoppedAt = i * 1048576;
                if(print) Console.Write($"...Done  Errors so far: {failCount}  Up to: {i}M");
                break;
            }
        }
        //BruteForceStoppedAt = (long)6.6e9 3.24e11;  


        ////////////////////////// Verification 3: 2^n + [-5 to +5] Testing //////////////////////////
        if(print) Console.Write("\r\nVerification 3: Starting 2^n + [-5 to +5] test: ...");
        sw.Restart();
        for (long s = 0; s < long.MaxValue; s++)
        {
            Parallel.For(s * 512, (s * 512) + 512, new ParallelOptions { MaxDegreeOfParallelism = MaxDegreeOfParallelism }, (x, s) =>
            {
                //if (sw.ElapsedMilliseconds > (testTimeinSeconds * 1000) * 0.10) s.Stop();
                for (long i = -5; i < 6; i++)
                {
                    BigInteger testVal = BigInteger.Pow(2, (int)x) + i;
                    if (testVal < BruteForceStoppedAt)
                    {
                        continue;
                    }

                    BigInteger root = Sqrt(testVal);

                    BigInteger lowerBound = root * root;
                    BigInteger upperBound = lowerBound + (2 * root) + 1;

                    if (testVal < lowerBound || testVal >= upperBound)
                    {
                        failCount++;
                        if(print) Console.WriteLine($"testVal: 2^{x} + {i} failed. [FailCt: { failCount++ }]");
                    }
                }
            });

            testCt += 128 * 10;

            if (sw.ElapsedMilliseconds > (testTimeinSeconds * 1000) * 0.25)
            {
                if(print) Console.Write($"...Done  Errors so far: {failCount}  Stopped at: 2^{s * 512}");
                break;
            }
        }


        ////////////////////////// Verification 4: 11111000000 Testing //////////////////////////
        // 10000, 11000, 11100, 11110, 11111 length=5  ->   & (1<<(b=1 to len)-1) << (len-b)   
        if(print) Console.Write("\r\nVerification 4: Starting 11111[n]00000[n] test: ...");
        sw.Restart();
        int startAt = BitOperations.Log2((ulong)BruteForceStoppedAt) - 1;
        Parallel.For(startAt, 1000, new ParallelOptions { MaxDegreeOfParallelism = MaxDegreeOfParallelism }, (length, s) =>
        {
            if (sw.ElapsedMilliseconds > (testTimeinSeconds * 1000) * 0.05)
            {
                s.Stop();
            }

            for (int i = 1; i <= length; i++)
            {
                BigInteger v = ((BigInteger.One << i) - 1) << (length - i);
                BigInteger root = Sqrt(v);

                BigInteger lowerBound = root * root;
                BigInteger upperBound = lowerBound + 2 * root + 1;

                if (v < lowerBound || v >= upperBound)
                {
                    failCount++;
                    if(print) Console.WriteLine($"failed: {i} 0's  {length - i} 1's [FailCt: { failCount++ }]"); //  \t {lowerBound} < {counter} < {upperBound}
                }
                testCt++;
            }
        });
        if(print) Console.Write($"...Done  Errors so far: {failCount}");


        ////////////////////////// Verification 5: 1010101010101 Testing //////////////////////////
        // 1,10,101,1010,10101 
        if(print) Console.Write("\r\nVerification 5: Starting 10101010101[n].. test: ...");

        sw.Restart();
        Parallel.For(startAt, 10000, new ParallelOptions { MaxDegreeOfParallelism = MaxDegreeOfParallelism }, (length, s) =>
        {
            if (sw.ElapsedMilliseconds > (testTimeinSeconds * 1000) * 0.1)
            {
                s.Stop();
            }

            BigInteger v = 1;
            for (int i = 2; i < length; i += 2)
            {
                v = (v << 2) + 1;
            }
            if ((length & 1) == 0)
            {
                v <<= 1;
            }

            BigInteger root = Sqrt(v);

            BigInteger lowerBound = root * root;
            BigInteger upperBound = lowerBound + 2 * root + 1;

            if (v < lowerBound || v >= upperBound)
            {
                BigInteger c = Sqrt(v); failCount++;
                if(print) Console.WriteLine($"failed: fail on '10' set {length} offby: {root - c} [FailCt: { failCount++ }]"); //  \t {lowerBound} < {counter} < {upperBound}
            }
            testCt++;

        });
        if(print) Console.Write($"...Done  Errors so far: {failCount}");


        ////////////////////////// Verification 6: n^2 -[0,1] Testing //////////////////////////
        //note: n^2 some overlap here with the "n^[2,3,5,6,7] + [-2,-1,0,1,2] Testing"
        if(print) Console.Write("\r\nVerification 6: n^2 - (0,1) test: .................");
        sw.Restart();
        Parallel.For(0L, (2L << 25), new ParallelOptions { MaxDegreeOfParallelism = MaxDegreeOfParallelism }, (x, s) =>
        //for (long x = 0; x < (1<<30); x++)
        {
            if (sw.ElapsedMilliseconds > (testTimeinSeconds * 1000) * 0.1)
            {
                s.Stop();
            }

            long l = x * x;
            long h = l + 2 * x;
            if (h < BruteForceStoppedAt)
            {
                BigInteger valLo = Sqrt(l);
                BigInteger valHi = Sqrt(h);
                if (valLo != valHi)
                {
                    if(print) Console.WriteLine($"{valLo}!={valHi} for {l} [FailCt: { failCount++ }]");
                }

                testCt++;
            }
        });
        if(print) Console.Write($"...Done  Errors so far: {failCount}");


        ////////////////////////// Verification 7 //////////////////////////
        if(print) Console.Write($"\r\nVerification 7: Random number testing...\r\n");
        sw.Restart();
        Parallel.For(0, 32, new ParallelOptions { MaxDegreeOfParallelism = MaxDegreeOfParallelism }, (p, s) =>
        {
            Random r = new(p + RAND_SEED);
            int counter = 0;
            while (true)
            {
                if (ALLOW_TIMED_EXPIRE_ON_RANDOM_NUMBER_TEST)
                {
                    #pragma warning disable CS0162
                    if (sw.ElapsedMilliseconds > (testTimeinSeconds * 1000) * 0.30)
                    {
                        s.Stop();
                        break;
                    }
                    #pragma warning restore CS0162
                }

                //int bitLenRangeBeg = (int)Math.Log2(4e34) + 10;//BitOperations.Log2((ulong)BruteForceStoppedAt)-1; //(int)Math.Log2(4e254) -3;
                //int bitLenRangeEnd = (int)Math.Log2(4e34) + 12; //1e308

                int bitLenBeg = (randomMinBitSize >= 0) ? randomMinBitSize : (BitOperations.Log2((ulong)BruteForceStoppedAt) - 1); //(int)Math.Log2(4e254) -3;
                int bitLenEnd = randomMaxBitSize;

                int bitLen = r.Next(bitLenBeg, bitLenEnd) + 1;
                int byteCt = (bitLen + 7) / 8;
                byte[] bytes = new byte[byteCt];
                r.NextBytes(bytes);
                bytes[byteCt - 1] |= 0x80;
                bytes[byteCt - 1] >>= 7 - ((bitLen - 1) % 8);
                BigInteger x = new(bytes, true, false);
                //x += counter + p; // a little extra randomness; can cause bitLen to go over.

                if (x < BruteForceStoppedAt)
                {
                    continue;
                }

                BigInteger a01 = Sqrt(x);

                BigInteger lowerBound = a01 * a01;
                BigInteger upperBound = lowerBound + (2 * a01) + 1;

                if (lowerBound > x || upperBound <= x)
                {
                    int offby = 0;
                    for (int i = -32; i < 32; i++)
                    {
                        if (x >= ((a01 + i) * (a01 + i))) //is high
                        {
                            offby = i;
                        }
                    }

                    if(print) Console.WriteLine($" {(double)x} !!!!! {(lowerBound > x ? "Lo" : "Hi")}  {x}  {lowerBound - x} offby: {offby} byteCt:{byteCt}"); //   \t {lowerBound} , {a01} , {upperBound}");
                    failCount++;
                }

                if (counter++ % 0x1000000 == 0)
                {
                    if(print) Console.WriteLine($"Status {string.Format("{0:T}", DateTime.Now)}: thread:{p}\tCount:{counter}\t2^{x.GetBitLength() - 1}/{(double)x} fails:{failCount}");
                }

                testCt++;

            }
        });
        if(print) Console.WriteLine($"Completed tests for {Sqrt.Method.Name} with {failCount} errors. {testCt} tests completed.");
    }

    private static void NumberRangeTest(BigInteger begAt, BigInteger endAt)
    {

        // x = begAt + ((range/200)/10) * subSize*i[0-(200/10)]  + ((range/200)/10) * j[0-10]

        BigInteger range = endAt - begAt;
        long testCount = 777777777841 / 511;
        long subSize = 133333547 / 31;
        BigInteger skipSize = range / (testCount); //should be a prime number
        for (BigInteger i = (testCount / subSize); i > 0; i--)
        {
            BigInteger section = begAt + skipSize * subSize * i;
            Parallel.For(0, subSize, new ParallelOptions { MaxDegreeOfParallelism = 32 }, (j, s) =>
            {
                BigInteger x = section - skipSize * j;
                double xAsDub = (double)x;

                ///////// The Test code here  /////////
                ulong vInt = (ulong)Math.Sqrt(xAsDub);
                BigInteger val = (vInt + ((ulong)(x / vInt))) >> 1;
                val = (val * val <= x) ? val : val - 1;



                //if(printOutput) Console.WriteLine($"  section {section}  j*skipSize:{j * skipSize}  x:{x}");


                // Check
                BigInteger tmp = val * val;
                if (tmp > x)
                {
                    Console.WriteLine($"val^2 ({tmp}) < x({x})  off%:{((double)(tmp)) / (double)x}");
                    //throw new Exception("Sqrt function had internal error - value too high");
                }
                if ((tmp + 2 * val + 1) <= x)
                {
                    Console.WriteLine($"(val+1)^2({((val + 1) * (val + 1))}) >= x({x})");
                    //throw new Exception("Sqrt function had internal error - value too low");
                }
            });
            Console.WriteLine($"i {i}  section {section}");

        }
        Console.WriteLine($"Done");
    }


    //source: https://github.com/pilotMike/Euler-Challenges-v2/blob/962f981c87e394773507bc00a708fdae202aa61c/EulerTools/Extensions/MyExtensions.cs  Michael DiLeo 2015
    private static bool IsSqrt(BigInteger n, BigInteger root)
    {
        BigInteger lowerBound = root * root;
        BigInteger upperBound = lowerBound + root + root + 1;

        return (n >= lowerBound && n < upperBound);
    }

    private static bool CheckSqrt(BigInteger number, BigInteger sqrt)
    {
        BigInteger margin = number - sqrt * sqrt;
        BigInteger maxError = (sqrt - 1) * 2;
        return (margin > maxError);
    }
}
